<template>
	<Layouts page="detail">
		<TnNotify ref="notifyRef" />
		<TnModal ref="modalRef" class="model-box" />
		<view class="imagecontent">
			<movable-area v-if="bigFileDownloadSuccess" scale-area class="movable-area">
				<movable-view class="movable-view" direction="all" scale="true" scale-min="1" scale-max="4">
					<image class="lookimg" :src="`${bigImgPath}`" mode="aspectFit">
					</image>
				</movable-view>
			</movable-area>
			<TnLoading v-else show animation mode="circle" color="rgb(239, 244, 255)" size="50px" />
			<view class="tool">
				<!-- <AdVideo> -->
				<view class="btn" @touchstart="downTouch = true" @touchend="downTouch = false"
					:class="{touch: downTouch}" @click="handleClick">
					<view>
						<TnIcon name="folder-download-fill" color="rgb(239, 244, 255)" size="24px" />
						<text v-if="!downloadLoading" class="btn-text">下载</text>
						<TnLoading v-else show animation mode="circle" color="rgb(239, 244, 255)" />
					</view>
				</view>
				<!-- </AdVideo> -->
				<view class="tn-mt-lg btn" @touchstart="shareTouch = true" @touchend="shareTouch = false"
					:class="{touch: shareTouch}">
					<view>
						<TnIcon name="send-fill" color="rgb(239, 244, 255)" size="24px" />
						<text class="btn-text">分享</text>
					</view>
				</view>
			</view>
		</view>
	</Layouts>
</template>

<script setup lang="uts">
	import Layouts from '@/layouts/index.uvue';
	import AdVideo from '@/components/AdVideo.uvue'
	import { state } from '@/store'
	import { BASE_URL, downLoadSuccess } from '@/api'
	import TnLoading from '@/uni_modules/tuniaoui-vue3/components/loading/src/loading.vue'
	import TnNotify from '@/uni_modules/tuniaoui-vue3/components/notify/src/notify.vue'
	import TnModal from '@/uni_modules/tuniaoui-vue3/components/modal/src/modal.vue'
	import TnIcon from '@/uni_modules/tuniaoui-vue3/components/icon/src/icon.vue'

	const downTouch = ref(false)
	const shareTouch = ref(false)
	const downloadLoading = ref(false)
	const notifyRef = ref(null)
	const modalRef = ref(null)

	// BASE_URL
	const baseUrl = BASE_URL.replace('/api', '')

	let imgName = ref('')
	// 小图片
	let smallImgUrl = ''
	const smallImgPath = computed(() => `${state.tempDir}/small_${imgName.value}`)
	let smallFileDownloadSuccess = false
	// 大图片
	let bigImgUrl = ''
	const bigImgPath = computed(() => `${state.tempDir}/big_${imgName.value}`)
	const bigFileDownloadSuccess = ref(false)


	onLoad((param) => {
		const data = JSON.parse(param.data)
		smallImgUrl = `${baseUrl}${data.small}`
		bigImgUrl = `${baseUrl}${data.big}`
		imgName.value = data.name

		const fileMgr = uni.getFileSystemManager()
		try {
			fileMgr.accessSync(bigImgPath.value)
			console.log('大图片存在')
			bigFileDownloadSuccess.value = true
		} catch (err) {
			console.error('大图片不存在: ', err)
			preDownloadBigImg()
		}

		try {
			fileMgr.accessSync(smallImgPath.value)
			console.log('小图片存在')
			smallFileDownloadSuccess = true
		} catch (err) {
			console.error('小图片不存在: ', err)
			preDownloadSmallImg()
		}
	})



	// 下载图片
	function preDownloadSmallImg() {
		uni.downloadFile({
			url: smallImgUrl,
			filePath: smallImgPath.value,
			header: {
				token: uni.getStorageSync('token'),
				'Content-Type': imgName.value.endsWith('.png') ? 'image/png' : 'image/jpeg'
			},
			success: (res) => {
				console.log('小图下载成功')
				smallFileDownloadSuccess = true
			},
			fail: (err) => { console.error('小图下载失败: ', err) }
		})
	}
	function preDownloadBigImg() {
		uni.downloadFile({
			url: bigImgUrl,
			header: {
				token: uni.getStorageSync('token'),
				'Content-Type': imgName.value.endsWith('.png') ? 'image/png' : 'image/jpeg'
			},
			filePath: bigImgPath.value,
			success: (res) => {
				console.log('大图下载成功')
				bigFileDownloadSuccess.value = true
			},
			fail: (err) => {
				console.error('大图下载失败: ', err)
			},
		})
	}

	const downloadFailMsg = () => {
		notifyRef.value?.show({
			msg: '保存失败',
			type: 'danger',
			position: 'center'
		})
	}

	function downloadImg(filePath) {
		downloadLoading.value = true
		uni.saveImageToPhotosAlbum({
			filePath: filePath,
			success: () => {
				notifyRef.value?.show({
					msg: '保存成功',
					type: 'success',
					position: 'center'
				})
			},
			fail: () => {
				downloadFailMsg()
				modalRef.value?.showModal({
					title: '未授权',
					content: '是否去设置相册授权',
					showCancel: true,
					confirmText: '授权',
					cancelText: '取消',
					mask: true,
					maskClosable: false,
					confirm: () => {
						uni.openAppAuthorizeSetting()
					},
				})
			},
			complete: () => {
				downloadLoading.value = false
			}
		})

		// const { albumAuthorized } = uni.getAppAuthorizeSetting()
		// if (albumAuthorized === 'authorized') {
		// 	// 已经获得授权，无需再次请求授权
		// 	downloadLoading.value = true
		// 	uni.saveImageToPhotosAlbum({
		// 		filePath: filePath,
		// 		success: () => {
		// 			notifyRef.value?.show({
		// 				msg: '保存成功',
		// 				type: 'success',
		// 				position: 'center'
		// 			})
		// 		},
		// 		fail: () => {
		// 			downloadFailMsg()
		// 		},
		// 		complete: () => {
		// 			downloadLoading.value = false
		// 		}
		// 	})
		// } else if (albumAuthorized === 'denied') {
		// 	modalRef.value?.showModal({
		// 		title: '未授权',
		// 		content: '是否去设置相册授权',
		// 		showCancel: true,
		// 		confirmText: '授权',
		// 		cancelText: '取消',
		// 		mask: true,
		// 		maskClosable: false,
		// 		confirm: () => {
		// 			uni.openAppAuthorizeSetting()
		// 		},
		// 	})
		// }
	}

	function handleClick() {
		modalRef.value?.showModal({
			title: '下载',
			content: '观看激励视频广告获取原图',
			showCancel: true,
			confirmText: '获取原图',
			cancelText: '直接下载',
			mask: true,
			maskClosable: false,
			confirm: () => {
				// 看广告，获取原图
				if (bigFileDownloadSuccess.value) {
					downloadImg(bigImgPath.value)
				} else {
					downloadFailMsg()
				}
			},
			cancel: () => {
				// 获取压缩图
				if (smallFileDownloadSuccess) {
					downloadImg(smallImgPath.value)
				} else {
					downloadFailMsg()
				}
			},
		})
	}

	onBeforeUnmount(() => {
		// 删除缓存
		// const fileMgr = uni.getFileSystemManager()
		// if (smallDownloadPath) {
		// 	fileMgr.unlink({
		// 		filePath: `${uni.env.USER_DATA_PATH}/temp`,
		// 		success: () => { console.log('小图片删除成功') },
		// 		fail: (err) => { console.err('小图片删除失败: ', err) }
		// 	})
		// }
		// if (bigDownloadPath.value) {
		// 	fileMgr.unlink({
		// 		filePath: bigDownloadPath.value,
		// 		success: () => { console.log('大图片删除成功') },
		// 		fail: (err) => { console.err('大图片删除失败: ', err) }
		// 	})
		// }
	})
</script>

<style scoped lang="scss">
	@function tovmin($rpx) {
		@return #{$rpx * 100 / 750}vmin;
	}

	.movable-view {
		height: 100%;
		width: 100%;
	}

	.movable-area {
		height: 100%;
		width: 100%;
		overflow: hidden;
	}

	.lookimg {
		// border: 1px solid red
	}

	.imagecontent {
		display: flex;
		justify-content: center;
		align-items: center;
		position: relative;
		width: 100%;
		height: 100%;
	}

	.tool {
		position: absolute;
		right: tovmin(20);
		bottom: tovmin(200);

		.btn {
			width: tovmin(100);
			height: tovmin(100);

			&>view {
				display: flex;
				justify-content: center;
				align-items: center;
			}
		}

		.touch {

			&>view {
				transform: scale(0.9);
			}

			background: rgba(255, 255, 255, 0.01);
			backdrop-filter: blur(4px);
			border-radius: 50%;
		}

		.btn-text {
			color: rgb(239, 244, 255);
			font-size: tovmin(26);
		}
	}

	.model-box :deep(.tn-modal__operation) {
		flex-direction: row;
	}

	.big-loading {
		position: absolute;
		width: 100vh;
		height: 100vh;
	}
</style>