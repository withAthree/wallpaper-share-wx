{"version":3,"file":"use-upload-handle-function.js","sources":["uni_modules/tuniaoui-vue3/components/image-upload/src/composables/use-upload-handle-function.ts"],"sourcesContent":["import { ref, watch } from 'vue'\r\nimport {\r\n  isArray,\r\n  isEmptyVariableInDefault,\r\n  isPromise,\r\n  isString,\r\n} from '../../../../utils'\r\nimport { isJsonString } from '../../../../utils/validator'\r\n\r\nimport type { ImageUploadFile, ImageUploadListItem } from '../types'\r\nimport type { ImageUploadProps } from '../image-upload'\r\n\r\nexport default function useUploadHandleFunction(props: ImageUploadProps) {\r\n  // 选择系统图片\r\n  const chooseImage = (count: number) => {\r\n    return new Promise<Array<ImageUploadFile>>((resolve, reject) => {\r\n      uni.chooseImage({\r\n        count,\r\n        sizeType: props.sizeType,\r\n        // extension: props.extensions,\r\n        sourceType: props.sourceType,\r\n        success: (res) => {\r\n          resolve(isArray(res.tempFiles) ? res.tempFiles : [res.tempFiles])\r\n        },\r\n        fail: (err) => {\r\n          reject(err)\r\n        },\r\n      })\r\n    })\r\n  }\r\n\r\n  // 上传图片事件，调用接口\r\n  // 正在上传标识\r\n  const uploading = ref(false)\r\n  watch(\r\n    () => uploading.value,\r\n    (val) => {\r\n      if (props.showErrorTips) {\r\n        if (val) uni.showLoading({ title: '上传中' })\r\n        else uni.hideLoading()\r\n      }\r\n    }\r\n  )\r\n  const uploadProcess = (item: ImageUploadListItem): Promise<boolean> => {\r\n    const { customUploadHandler, customUploadCallback } = props\r\n    if (uploading.value) return Promise.reject('有文件正在上传')\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // 如果有自定义上传处理函数，则调用自定义上传处理函数\r\n      if (customUploadHandler) {\r\n        const uploadHandlerResult = customUploadHandler(item.file!)\r\n        const isUploadHandlePromiseOrString = [\r\n          isPromise(uploadHandlerResult),\r\n          isString(uploadHandlerResult),\r\n        ].includes(true)\r\n        if (!isUploadHandlePromiseOrString) {\r\n          console.error(\r\n            '[TnImageUpload]自定义上传处理函数必须返回Promise和String'\r\n          )\r\n          reject('自定义上传处理函数必须返回Promise和String')\r\n          return\r\n        }\r\n        uploading.value = true\r\n        item.status = 'uploading'\r\n\r\n        if (isPromise(uploadHandlerResult)) {\r\n          uploadHandlerResult\r\n            .then((res) => {\r\n              if (res) {\r\n                item.url = res\r\n                resolve(true)\r\n              } else {\r\n                resolve(false)\r\n              }\r\n            })\r\n            .catch((err) => {\r\n              console.error('[TnImageUpload]上传文件发生错误', err)\r\n              reject(err?.errMsg || '上传文件发生错误')\r\n            })\r\n            .finally(() => {\r\n              uploading.value = false\r\n            })\r\n        } else {\r\n          if (uploadHandlerResult) {\r\n            item.url = uploadHandlerResult\r\n            resolve(true)\r\n          } else {\r\n            resolve(false)\r\n          }\r\n          uploading.value = false\r\n        }\r\n      } else {\r\n        // 内部集成图片上传\r\n        uploading.value = true\r\n        item.status = 'uploading'\r\n\r\n        // 创建上传对象\r\n        const task = uni.uploadFile({\r\n          url: props.action!,\r\n          filePath: item.url,\r\n          name: props.name,\r\n          formData: props.formData,\r\n          header: props.header,\r\n          success: (res: UniApp.UploadFileSuccessCallbackResult) => {\r\n            // 判断用户是否自己处理上传后服务器回传的结果\r\n            if (customUploadCallback) {\r\n              const customUploadCallbackResult = customUploadCallback(res)\r\n              const isCustomUploadCallbackPromiseOrString = [\r\n                isPromise(customUploadCallbackResult),\r\n                isString(customUploadCallbackResult),\r\n              ].includes(true)\r\n              if (!isCustomUploadCallbackPromiseOrString) {\r\n                console.error(\r\n                  '[TnImageUpload]自定义上传回调函数必须返回Promise和String'\r\n                )\r\n                reject('自定义上传回调函数必须返回Promise和String')\r\n                return\r\n              }\r\n\r\n              if (isPromise(customUploadCallbackResult)) {\r\n                customUploadCallbackResult\r\n                  .then((res) => {\r\n                    if (res) {\r\n                      item.url = res\r\n                      resolve(true)\r\n                    } else {\r\n                      resolve(false)\r\n                    }\r\n                  })\r\n                  .catch((err) => {\r\n                    console.error('[TnImageUpload]上传文件发生错误', err)\r\n                    reject(err?.errMsg || '上传文件发生错误')\r\n                  })\r\n              } else {\r\n                if (customUploadCallbackResult) {\r\n                  item.url = customUploadCallbackResult\r\n                  resolve(true)\r\n                } else {\r\n                  resolve(false)\r\n                }\r\n              }\r\n            } else {\r\n              // 使用集成的上传回调函数\r\n              const { statusCode, data: resData } = res\r\n              if (![200, 201, 204].includes(statusCode)) {\r\n                console.error('[TnImageUpload]上传文件发生错误', res)\r\n                reject(res?.errMsg || '上传文件发生错误')\r\n                return\r\n              } else {\r\n                const data = isJsonString(resData)\r\n                  ? JSON.parse(resData)\r\n                  : resData\r\n                // 默认返回的格式为 { code: 200, data: { errorCode: 0,  url: '' } }\r\n                if (data.code === 200 && data.data.errCode === 0) {\r\n                  item.url = data.data.url\r\n                  resolve(true)\r\n                } else {\r\n                  console.error('[TnImageUpload]上传文件发生错误', res)\r\n                  reject(\r\n                    isEmptyVariableInDefault(\r\n                      data?.message,\r\n                      data?.msg || '上传文件发生错误'\r\n                    )\r\n                  )\r\n                }\r\n              }\r\n            }\r\n          },\r\n          fail: (err) => {\r\n            console.error('[TnImageUpload]上传文件发生错误', err)\r\n            reject(err?.errMsg || '上传文件发生错误')\r\n          },\r\n          complete: () => {\r\n            uploading.value = false\r\n            resolve(true)\r\n          },\r\n        })\r\n\r\n        item.uploadTask = task\r\n        // 监听上传进度\r\n        task.onProgressUpdate((res) => {\r\n          if (res.progress > 0) {\r\n            item.progress = res.progress\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  // 检查文件是否超过最大文件尺寸或者不符合上传文件类型\r\n  const checkFileSizeAndExtension = (files: Array<ImageUploadFile>) => {\r\n    const { extensions, maxSize } = props\r\n    // #ifdef MP-ALIPAY\r\n    extensions.push('image')\r\n    // #endif\r\n    const extReg = /.+\\./\r\n    return files.filter((item) => {\r\n      // 获取文件后缀名\r\n      let fileExt = ''\r\n      // #ifdef H5\r\n      fileExt = (item as File).name.replace(extReg, '').toLowerCase()\r\n      // #endif\r\n      // #ifndef H5\r\n      fileExt = (item as UniApp.ChooseImageSuccessCallbackResultFile).path\r\n        .replace(extReg, '')\r\n        .toLowerCase()\r\n      // #endif\r\n      return (\r\n        !extensions.some((ext) => ext.toLowerCase() === fileExt) ||\r\n        item.size > maxSize\r\n      )\r\n    })\r\n  }\r\n\r\n  // 是否显示错误提示\r\n  const showErrorTips = (msg: string) => {\r\n    if (!props.showErrorTips) return\r\n    uni.showToast({\r\n      icon: 'none',\r\n      title: msg,\r\n    })\r\n  }\r\n\r\n  return {\r\n    chooseImage,\r\n    uploadProcess,\r\n    checkFileSizeAndExtension,\r\n    showErrorTips,\r\n  }\r\n}\r\n"],"names":["uni","isArray","ref","watch","isPromise","isString","res","isJsonString","isEmptyVariableInDefault"],"mappings":";;;;;AAYwB,SAAA,wBAAwB,OAAuB;AAErE,QAAM,cAAc,CAAC,UAAa;AAChC,WAAO,IAAI,QAAgC,CAAC,SAAS,WAAM;AACzDA,oBAAAA,MAAI,YAAY;AAAA,QACd;AAAA,QACA,UAAU,MAAM;AAAA;AAAA,QAEhB,YAAY,MAAM;AAAA,QAClB,SAAS,CAAC,QAAG;AACX,kBAAQC,cAAAA,QAAQ,IAAI,SAAS,IAAI,IAAI,YAAY,CAAC,IAAI,SAAS,CAAC;AAAA,QACjE;AAAA,QACD,MAAM,CAAC,QAAG;AACR,iBAAO,GAAG;AAAA,QACX;AAAA,MACF,CAAA;AAAA,IACH,CAAC;AAAA,EACH;AAIA,QAAM,YAAYC,kBAAI,KAAK;AAC3BC,gBAAK,MACH,MAAM;AAAA,WAAA,UAAU;AAAA,EAAV,GACN,CAAC,QAAG;AACF,QAAI,MAAM,eAAe;AACvB,UAAI;AAAKH,sBAAAA,MAAI,YAAY,EAAE,OAAO,MAAO,CAAA;AAAA;AACpCA,sBAAG,MAAC,YAAW;AAAA,IACrB;AAAA,EACH,CAAC;AAEH,QAAM,gBAAgB,CAAC,SAAyB;AACtC,UAAA,sBAA8C,MAAK,qBAA9B,uBAAyB,MAAK;AAC3D,QAAI,UAAU;AAAO,aAAO,QAAQ,OAAO,SAAS;AAEpD,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAM;AAEjC,UAAI,qBAAqB;AACvB,cAAM,sBAAsB,oBAAoB,KAAK,IAAK;AAC1D,cAAM,gCAAgC;AAAA,UACpCI,cAAAA,UAAU,mBAAmB;AAAA,UAC7BC,cAAAA,SAAS,mBAAmB;AAAA,QAC7B,EAAC,SAAS,IAAI;AACf,YAAI,CAAC,+BAA+B;AAClCL,wBAAAA,MAAA,MAAA,SAAA,yGACE,4CAA4C;AAE9C,iBAAO,6BAA6B;AACpC;AAAA,QACD;AACD,kBAAU,QAAQ;AAClB,aAAK,SAAS;AAEd,YAAII,cAAAA,UAAU,mBAAmB,GAAG;AAClC,8BACG,KAAK,CAAC,QAAG;AACR,gBAAI,KAAK;AACP,mBAAK,MAAM;AACX,sBAAQ,IAAI;AAAA,YACb,OAAM;AACL,sBAAQ,KAAK;AAAA,YACd;AAAA,UACH,CAAC,EACA,MAAM,CAAC,QAAG;AACTJ,wJAAc,2BAA2B,GAAG;AAC5C,oBAAO,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAU,UAAU;AAAA,UAClC,CAAC,EACA,QAAQ,MAAA;AACP,sBAAU,QAAQ;AAAA,UACpB,CAAC;AAAA,QACJ,OAAM;AACL,cAAI,qBAAqB;AACvB,iBAAK,MAAM;AACX,oBAAQ,IAAI;AAAA,UACb,OAAM;AACL,oBAAQ,KAAK;AAAA,UACd;AACD,oBAAU,QAAQ;AAAA,QACnB;AAAA,MACF,OAAM;AAEL,kBAAU,QAAQ;AAClB,aAAK,SAAS;AAGd,cAAM,OAAOA,cAAG,MAAC,WAAW;AAAA,UAC1B,KAAK,MAAM;AAAA,UACX,UAAU,KAAK;AAAA,UACf,MAAM,MAAM;AAAA,UACZ,UAAU,MAAM;AAAA,UAChB,QAAQ,MAAM;AAAA,UACd,SAAS,CAAC,QAA2C;AAEnD,gBAAI,sBAAsB;AACxB,oBAAM,6BAA6B,qBAAqB,GAAG;AAC3D,oBAAM,wCAAwC;AAAA,gBAC5CI,cAAAA,UAAU,0BAA0B;AAAA,gBACpCC,cAAAA,SAAS,0BAA0B;AAAA,cACpC,EAAC,SAAS,IAAI;AACf,kBAAI,CAAC,uCAAuC;AAC1CL,8BAAAA,+HACE,4CAA4C;AAE9C,uBAAO,6BAA6B;AACpC;AAAA,cACD;AAED,kBAAII,cAAAA,UAAU,0BAA0B,GAAG;AACzC,2CACG,KAAK,CAACE,SAAG;AACR,sBAAIA,MAAK;AACP,yBAAK,MAAMA;AACX,4BAAQ,IAAI;AAAA,kBACb,OAAM;AACL,4BAAQ,KAAK;AAAA,kBACd;AAAA,gBACH,CAAC,EACA,MAAM,CAAC,QAAG;AACTN,gCAAc,MAAA,MAAA,SAAA,0GAAA,2BAA2B,GAAG;AAC5C,0BAAO,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAU,UAAU;AAAA,gBAClC,CAAC;AAAA,cACJ,OAAM;AACL,oBAAI,4BAA4B;AAC9B,uBAAK,MAAM;AACX,0BAAQ,IAAI;AAAA,gBACb,OAAM;AACL,0BAAQ,KAAK;AAAA,gBACd;AAAA,cACF;AAAA,YACF,OAAM;AAEG,oBAAA,aAA8B,IAAG,YAAf,UAAY,IAAG;AACzC,kBAAI,CAAC,CAAC,KAAK,KAAK,GAAG,EAAE,SAAS,UAAU,GAAG;AACzCA,8BAAA,MAAA,MAAA,SAAA,0GAAc,2BAA2B,GAAG;AAC5C,wBAAO,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAU,UAAU;AAChC;AAAA,cACD,OAAM;AACL,sBAAM,OAAOO,+CAAY,aAAC,OAAO,IAC7B,KAAK,MAAM,OAAO,IAClB;AAEJ,oBAAI,KAAK,SAAS,OAAO,KAAK,KAAK,YAAY,GAAG;AAChD,uBAAK,MAAM,KAAK,KAAK;AACrB,0BAAQ,IAAI;AAAA,gBACb,OAAM;AACLP,+JAAc,2BAA2B,GAAG;AAC5C,yBACEQ,uCAAAA,yBACE,iBAAA,SAAI,SAAA,SAAJ,KAAM,UACN,SAAI,QAAJ,SAAI,SAAA,SAAJ,KAAM,QAAO,UAAU,CACxB;AAAA,gBAEJ;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACD,MAAM,CAAC,QAAG;AACRR,0BAAA,MAAA,MAAA,SAAA,0GAAc,2BAA2B,GAAG;AAC5C,oBAAO,QAAG,QAAH,QAAG,SAAA,SAAH,IAAK,WAAU,UAAU;AAAA,UACjC;AAAA,UACD,UAAU,MAAA;AACR,sBAAU,QAAQ;AAClB,oBAAQ,IAAI;AAAA,UACb;AAAA,QACF,CAAA;AAED,aAAK,aAAa;AAElB,aAAK,iBAAiB,CAAC,QAAG;AACxB,cAAI,IAAI,WAAW,GAAG;AACpB,iBAAK,WAAW,IAAI;AAAA,UACrB;AAAA,QACH,CAAC;AAAA,MACF;AAAA,IACH,CAAC;AAAA,EACH;AAGA,QAAM,4BAA4B,CAAC,UAA6B;AACtD,UAAA,aAAwB,MAAK,YAAjB,UAAY,MAAK;AAIrC,UAAM,SAAS;AACf,WAAO,MAAM,OAAO,CAAC,SAAI;AAEvB,UAAI,UAAU;AAKd,gBAAW,KAAqD,KAC7D,QAAQ,QAAQ,EAAE,EAClB;AAEH,aACE,CAAC,WAAW,KAAK,CAAC,QAAG;AAAK,eAAA,IAAI,YAAW,MAAO;AAAA,OAAO,KACvD,KAAK,OAAO;AAAA,IAEhB,CAAC;AAAA,EACH;AAGA,QAAM,gBAAgB,CAAC,QAAW;AAChC,QAAI,CAAC,MAAM;AAAe;AAC1BA,kBAAAA,MAAI,UAAU;AAAA,MACZ,MAAM;AAAA,MACN,OAAO;AAAA,IACR,CAAA;AAAA,EACH;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAEJ;;"}