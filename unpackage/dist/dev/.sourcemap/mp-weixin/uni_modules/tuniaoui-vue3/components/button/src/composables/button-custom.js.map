{"version":3,"file":"button-custom.js","sources":["uni_modules/tuniaoui-vue3/components/button/src/composables/button-custom.ts"],"sourcesContent":["import { computed, toRef } from 'vue'\nimport { useComponentColor, useNamespace } from '../../../../hooks'\nimport { formatDomSizeValue, isEmpty } from '../../../../utils'\n\nimport type { CSSProperties } from 'vue'\nimport type { ButtonProps } from '../button'\n\nexport const useButtonCustomStyle = (props: ButtonProps) => {\n  const ns = useNamespace('button')\n  // 解析背景颜色\n  const [bgColorClass, bgColorStyle] = useComponentColor(\n    toRef(props, 'bgColor'),\n    'bg'\n  )\n  // 解析字体颜色\n  const [textColorClass, textColorStyle] = useComponentColor(\n    toRef(props, 'textColor'),\n    'text'\n  )\n  // 解析边框颜色\n  const [borderColorClass, borderColorStyle] = useComponentColor(\n    toRef(props, 'borderColor'),\n    'border'\n  )\n  // 解析阴影颜色\n  const [shadowColorClass, shadowColorStyle] = useComponentColor(\n    toRef(props, 'shadowColor'),\n    'shadow'\n  )\n  // 按钮动态类\n  const buttonClass = computed<string>(() => {\n    const cls: string[] = [ns.b()]\n    if (props.onlyButton) {\n      cls.push(ns.m('only-button'))\n      return cls.join(' ')\n    }\n\n    // 设置文字按钮\n    if (props.text) cls.push(ns.m('text'))\n\n    // 设置朴素按钮\n    if (props.plain) {\n      cls.push(ns.m('plain'))\n      if (props.borderBold) cls.push(ns.m('plain-bold'))\n    }\n\n    // 设置按钮颜色类型\n    if (props.type) {\n      if (props.text) {\n        if (!props.textColor) cls.push(`tn-type-${props.type}_text`)\n      } else if (props.plain) {\n        if (!props.borderColor) cls.push(`tn-type-${props.type}_border`)\n      } else {\n        if (!props.bgColor) cls.push(`tn-type-${props.type}_bg`)\n      }\n    }\n\n    // 设置按钮尺寸\n    if (props.size) cls.push(ns.m(props.size))\n\n    // 设置按钮形状\n    if (!props.text && props.shape) cls.push(ns.m(props.shape))\n\n    // 设置字体是否加粗\n    if (props.bold) cls.push('tn-text-bold')\n\n    // 设置背景颜色\n    if (!props.text && !props.plain) {\n      if (bgColorClass.value) cls.push(bgColorClass.value)\n    }\n\n    // 设置字体颜色\n    if (textColorClass.value) cls.push(textColorClass.value)\n\n    if (props.plain) {\n      // 设置边框颜色\n      if (borderColorClass.value) cls.push(borderColorClass.value)\n    }\n\n    // 设置阴影信息\n    if (props.shadow) {\n      cls.push('tn-shadow')\n      // 设置阴影颜色\n      if (shadowColorClass.value) cls.push(shadowColorClass.value)\n    }\n    if (props.customClass) cls.push(props.customClass)\n    return cls.join(' ')\n  })\n\n  // 按钮样式\n  const buttonStyle = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    if (props.onlyButton) return style\n    // 设置按钮宽高\n    if (props.width) {\n      style.width = formatDomSizeValue(props.width)\n      if (props.shape === 'circle') style.height = style.width\n    }\n    if (props.height && props.shape !== 'circle')\n      style.height = formatDomSizeValue(props.height)\n\n    // 设置按钮字体大小\n    if (props.fontSize) style.fontSize = formatDomSizeValue(props.fontSize)\n\n    // 设置背景颜色\n    if (!props.text && !props.plain) {\n      if (bgColorStyle.value) style.backgroundColor = bgColorStyle.value\n    }\n\n    // 设置字体颜色\n    if (textColorStyle.value) {\n      style.color = textColorStyle.value\n    }\n\n    // 设置边框颜色\n    if (props.plain && borderColorStyle.value) {\n      style.borderColor = borderColorStyle.value\n    }\n\n    // 设置阴影颜色\n    if (props.shadow && shadowColorStyle.value)\n      style.boxShadow = shadowColorStyle.value\n\n    if (!isEmpty(props.customStyle)) {\n      Object.assign(style, props.customStyle)\n    }\n    return style\n  })\n\n  return {\n    ns,\n    buttonClass,\n    buttonStyle,\n  }\n}\n"],"names":["useNamespace","__read","useComponentColor","toRef","computed","formatDomSizeValue","isEmpty"],"mappings":"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"}