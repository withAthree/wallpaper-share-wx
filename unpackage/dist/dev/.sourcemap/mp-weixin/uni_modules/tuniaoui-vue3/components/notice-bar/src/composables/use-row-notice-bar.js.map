{"version":3,"file":"use-row-notice-bar.js","sources":["uni_modules/tuniaoui-vue3/components/notice-bar/src/composables/use-row-notice-bar.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { noticeBarKey } from '../../../../tokens'\nimport { useSelectorQuery } from '../../../../hooks'\nimport {\n  debugWarn,\n  generateId,\n  isEmptyVariableInDefault,\n} from '../../../../utils'\n\nexport const useRowNoticeBar = () => {\n  const instance = getCurrentInstance()\n  const noticeBar = inject(noticeBarKey, null)\n\n  const { getSelectorNodeInfo } = useSelectorQuery(instance)\n\n  const componentId = `trnb-${generateId()}`\n  const componentTextId = `${componentId}-text`\n\n  // 需要显示的数据\n  const data = computed<string>(() => {\n    if (!noticeBar?.data?.length) return ''\n    return noticeBar.data.join(' ')\n  })\n\n  // 每秒显示的像素数\n  const speed = computed<number>(() =>\n    isEmptyVariableInDefault(noticeBar?.speed, 80)\n  )\n\n  // 动画参数\n  let animationDuration = 0\n  let animation: UniApp.Animation | null = null\n  const animationData = ref<any>(null)\n  let animationLoopTimer: ReturnType<typeof setInterval> | null = null\n\n  // 创建动画\n  const createAnimation = () => {\n    animation = uni.createAnimation({\n      duration: animationDuration,\n      timingFunction: 'linear',\n    })\n\n    animation\n      .translateX(\n        -(contentWidth + contentTextWidth) + Number(Math.random() * 10)\n      )\n      .step({\n        duration: animationDuration,\n      })\n    animation.translateX(0).step({\n      duration: 0,\n    })\n\n    animationData.value = animation.export()\n  }\n  // 创建循环动画\n  const createLoopAnimation = () => {\n    createAnimation()\n    animationLoopTimer = setInterval(() => {\n      createAnimation()\n    }, animationDuration + 80)\n  }\n  // 停止动画\n  const stopAnimation = () => {\n    animation = null\n    animationData.value = null\n    if (animationLoopTimer) {\n      clearInterval(animationLoopTimer)\n      animationLoopTimer = null\n    }\n  }\n\n  watch(\n    () => noticeBar?.play,\n    (newVal) => {\n      if (newVal) {\n        createLoopAnimation()\n      } else {\n        stopAnimation()\n      }\n    }\n  )\n\n  let initCount = 0\n  // 获取内容区域容器信息\n  let contentWidth = 0\n  let contentTextWidth = 0\n  const getContentRectInfo = async () => {\n    try {\n      const contentRectInfo = await getSelectorNodeInfo(`#${componentId}`)\n      const contentTextRectInfo = await getSelectorNodeInfo(\n        `#${componentTextId}`\n      )\n\n      initCount = 0\n\n      // 根据 t=s/v(时间=路程/速度)\n      contentWidth = contentRectInfo.width || 0\n      contentTextWidth = contentTextRectInfo.width || 0\n      animationDuration =\n        ((contentWidth + contentTextWidth) / speed.value) * 1000\n\n      if (noticeBar?.play && noticeBar?.autoPlay) {\n        setTimeout(() => {\n          createLoopAnimation()\n        }, 50)\n      }\n    } catch (err) {\n      if (initCount > 10) {\n        initCount = 0\n        debugWarn('TnNoticeBar', `获取通知栏容器信息失败: ${err}`)\n        return\n      }\n      initCount++\n      setTimeout(() => {\n        getContentRectInfo()\n      }, 150)\n    }\n  }\n\n  // 如果修改了speed重新初始化\n  watch(\n    () => noticeBar?.speed,\n    () => {\n      stopAnimation()\n      getContentRectInfo()\n    }\n  )\n\n  // 通知点击事件\n  const noticeClickEvent = () => {\n    noticeBar?.click(0)\n  }\n\n  onMounted(() => {\n    nextTick(() => {\n      getContentRectInfo()\n    })\n  })\n\n  return {\n    componentId,\n    componentTextId,\n    data,\n    animationData,\n    noticeClickEvent,\n  }\n}\n"],"names":["getCurrentInstance","inject","noticeBarKey","useSelectorQuery","generateId","computed","isEmptyVariableInDefault","ref","uni","watch","__awaiter","debugWarn","onMounted","nextTick"],"mappings":"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"}