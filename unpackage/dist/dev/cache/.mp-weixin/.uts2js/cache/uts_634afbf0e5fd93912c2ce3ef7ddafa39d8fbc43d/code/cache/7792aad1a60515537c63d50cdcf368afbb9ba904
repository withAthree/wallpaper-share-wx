{"code":"import { computed, nextTick, reactive, ref, watch } from 'vue';\nimport dayjs from '../../../../libs/dayjs';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../../constants';\nimport { debugWarn, isString } from '../../../../utils';\nimport { solar2lunar } from '../../libs/lunar-calendar';\nimport { useCalendarSelector } from './use-calendar-selector';\n// 默认的日期格式\nconst DEFAULT_DATE_FORMAT = 'YYYY/MM/DD';\n// 格式化日期数据，将-替换为/\nconst formatDate = (date) => {\n    if (!date || !date.length)\n        return date;\n    if (isString(date)) {\n        return date.replace(/-/g, '/');\n    }\n    return date.map((item) => { return item.replace(/-/g, '/'); });\n};\n// 填充0\nconst fillDateZero = (date) => { return String(date).padStart(2, '0'); };\n// 根据年月日生成日期字符串\nconst generateDateStr = (date) => {\n    return `${date.year}/${fillDateZero(date.month)}/${fillDateZero(date.date)}`;\n};\nexport const useCalendar = (props, emits) => {\n    // 重新加载月份swiper\n    const reloadMonthSwiper = ref(false);\n    // 日历的数据\n    const calendarData = ref([]);\n    // 星期提示文字\n    const weekText = ref(['日', '一', '二', '三', '四', '五', '六']);\n    // 最小年月日\n    const minDate = reactive({\n        year: 0,\n        month: 0,\n        date: 0,\n    });\n    // 最大年月日\n    const maxDate = reactive({\n        year: 0,\n        month: 0,\n        date: 0,\n    });\n    // 当前年月日\n    const currentDate = reactive({\n        year: 0,\n        month: 0,\n        date: 0,\n    });\n    // 当前选中的年月日\n    const currentSelectedDate = reactive({\n        year: 0,\n        month: 0,\n        date: 0,\n    });\n    // 日期范围内数据\n    const rangeDate = reactive({});\n    // 更新modelValue\n    // 标记是否需要重新渲染日历\n    let needRenderCalendar = false;\n    const updateModelValue = (changeEmit = true) => {\n        const modelValue = props.modelValue, mode = props.mode;\n        const formatModelValue = formatDate(modelValue);\n        let value = '';\n        // 根据不同的模式，返回不同的值\n        switch (mode) {\n            case 'date':\n                // 如果当前选中的日期不为空，则先将之前选中日期的选中状态修改为normal\n                if (modelValue) {\n                    const dateDayjs = dayjs(formatModelValue, DEFAULT_DATE_FORMAT);\n                    updateDateStatus(dateDayjs, 'normal');\n                }\n                // 设置当前选中日期为激活状态\n                updateDateStatus(currentSelectedDate, 'active');\n                value = generateDateStr(currentSelectedDate);\n                break;\n            case 'multi':\n                // 判断当前选中的日期是否已经存在于modelValue中，如果存在，则将其从modelValue中移除\n                // eslint-disable-next-line no-case-declarations\n                const activeIndex = formatModelValue.indexOf(generateDateStr(currentSelectedDate));\n                if (formatModelValue.length && activeIndex !== -1) {\n                    updateDateStatus(currentSelectedDate, 'normal');\n                    formatModelValue.splice(activeIndex, 1);\n                    value = [...formatModelValue];\n                }\n                else {\n                    updateDateStatus(currentSelectedDate, 'active');\n                    value = [\n                        ...formatModelValue,\n                        generateDateStr(currentSelectedDate),\n                    ];\n                }\n                break;\n            case 'range':\n                // 如果已选的值为空或者长度为2，则将当前选中的日期设置为开始日期\n                if (!formatModelValue ||\n                    formatModelValue.length === 0 ||\n                    formatModelValue.length === 2) {\n                    if (formatModelValue.length === 2) {\n                        // 清空原来设置的时间\n                        const startDateDayjs = dayjs(formatModelValue[0], DEFAULT_DATE_FORMAT);\n                        const endDateDayjs = dayjs(formatModelValue[1], DEFAULT_DATE_FORMAT);\n                        updateDateStatus(startDateDayjs, 'normal');\n                        updateDateStatus(endDateDayjs, 'normal');\n                    }\n                    value = [generateDateStr(currentSelectedDate)];\n                }\n                else {\n                    // 判断当前选中的日期是否比开始日期还要着，如果是则重新设置开始日期\n                    const currentDate_1 = generateDateStr(currentSelectedDate);\n                    if (rangeDate.start) {\n                        if (rangeDate.start.isAfter(generateDateStr(currentSelectedDate))) {\n                            value = [currentDate_1];\n                        }\n                        else {\n                            // 将选择后的日添加为结束日期\n                            value = [\n                                ...formatModelValue,\n                                generateDateStr(currentSelectedDate),\n                            ];\n                        }\n                    }\n                }\n                needRenderCalendar = true;\n                break;\n        }\n        emits(UPDATE_MODEL_EVENT, value);\n        if (changeEmit) {\n            nextTick(() => {\n                emits(CHANGE_EVENT, value);\n            });\n        }\n    };\n    // 当前月份在中数据中的索引\n    const currentMonthIndex = computed(() => {\n        return calendarData.value.findIndex((item) => { return item.month === currentSelectedDate.month; });\n    });\n    // 当前月份中日期数据的长度\n    const currentMonthDateLength = computed(() => {\n        var _a, _b;\n        return ((_b = (_a = calendarData.value[currentMonthIndex.value]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length) || 0;\n    });\n    // 处理容器信息\n    const _a = useCalendarSelector(currentMonthDateLength, props.mode), calendarId = _a.calendarId, dateContainerHeight = _a.dateContainerHeight;\n    // 保存当前设置的日期信息\n    const activeDateValueMap = new Map();\n    // 生成日历数据\n    const generateCalendarData = () => {\n        const data = [];\n        // 填充日期数据\n        const _fillDateData = (month, minDisabledDate = 0, maxDisabledDate = 0) => {\n            var _a;\n            const monthData = {\n                month,\n                data: [],\n            };\n            // 获取对应年份和月份\n            const activeDates = (_a = activeDateValueMap\n                .get(currentSelectedDate.year)) === null || _a === void 0 ? void 0 : _a.get(month);\n            // 获取当前月份的天数\n            const days = new Date(currentSelectedDate.year, month, 0).getDate();\n            // 获取当前月份的第一天是星期几\n            const firstDayWeek = new Date(`${currentSelectedDate.year}/${month}/1`).getDay();\n            // 填充空白数据\n            for (let i = 0; i < firstDayWeek; i++) {\n                monthData.data.push({\n                    date: 0,\n                    status: 'disabled',\n                });\n            }\n            // 填充日期数据\n            for (let i = 1; i <= days; i++) {\n                let status = i < minDisabledDate || (maxDisabledDate && i > maxDisabledDate)\n                    ? 'disabled'\n                    : 'normal';\n                if (activeDates === null || activeDates === void 0 ? void 0 : activeDates.includes(i))\n                    status = 'active';\n                let desc = '';\n                if (props.showLunar) {\n                    const lunarValue = solar2lunar(currentSelectedDate.year, month, i);\n                    if (lunarValue !== -1) {\n                        desc =\n                            lunarValue.IDayCn === '初一'\n                                ? lunarValue.IMonthCn\n                                : lunarValue.IDayCn;\n                    }\n                }\n                // 设置日期范围数据\n                if (props.mode === 'range') {\n                    const start = rangeDate.start, end = rangeDate.end;\n                    if (start &&\n                        start.isSame(`${currentSelectedDate.year}/${month}/${i}`)) {\n                        status = 'active';\n                        desc = props.rangeStartDesc;\n                    }\n                    if (end && end.isSame(`${currentSelectedDate.year}/${month}/${i}`)) {\n                        status = 'active';\n                        desc = props.rangeEndDesc;\n                    }\n                    if (start && end) {\n                        // 判断是否在范围内\n                        const currentDateDayjs = dayjs(`${currentSelectedDate.year}/${month}/${i}`, DEFAULT_DATE_FORMAT);\n                        if (currentDateDayjs.isAfter(start) &&\n                            currentDateDayjs.isBefore(end)) {\n                            status = 'range';\n                        }\n                    }\n                }\n                monthData.data.push({\n                    date: i,\n                    status,\n                    desc,\n                });\n            }\n            return monthData;\n        };\n        // 填充月份数据\n        let minMonth = 1;\n        let maxMonth = 12;\n        // 如果当前选中的年份等于最小年份，那么最小月份就是最小年份的月份\n        if (currentSelectedDate.year === minDate.year) {\n            minMonth = minDate.month;\n        }\n        if (currentSelectedDate.year === maxDate.year) {\n            maxMonth = maxDate.month;\n        }\n        if (minMonth === 0 || maxMonth === 0)\n            return;\n        for (let i = minMonth; i <= maxMonth; i++) {\n            let minDisabledDate = 0;\n            let maxDisabledDate = 0;\n            // 如果当前选中的年份等于最小年份，那么最小月份就是最小年份的月份\n            if (currentSelectedDate.year === minDate.year && i === minMonth) {\n                minDisabledDate = minDate.date;\n                maxDisabledDate = 0;\n            }\n            if (currentSelectedDate.year === maxDate.year && i === maxMonth) {\n                minDisabledDate = 0;\n                maxDisabledDate = maxDate.date;\n            }\n            data.push(_fillDateData(i, minDisabledDate, maxDisabledDate));\n        }\n        calendarData.value = data;\n    };\n    watch(() => { return props.modelValue; }, (val) => {\n        if (val || val.length) {\n            const mode = props.mode;\n            let modelValue = [];\n            if (mode === 'date')\n                modelValue = [val];\n            else\n                modelValue = val;\n            activeDateValueMap.clear();\n            // 遍历获取对应已设置的日期信息\n            modelValue.forEach((item) => {\n                var _a, _b;\n                const dateDayjs = dayjs(formatDate(item), DEFAULT_DATE_FORMAT);\n                const year = dateDayjs.year();\n                const month = dateDayjs.month() + 1;\n                const date = dateDayjs.date();\n                // 设置当前激活的年份和月份\n                if (currentSelectedDate.year === 0) {\n                    currentSelectedDate.year = year;\n                    currentSelectedDate.month = month;\n                }\n                if (activeDateValueMap.has(year)) {\n                    let monthDates = (_a = activeDateValueMap.get(year)) === null || _a === void 0 ? void 0 : _a.get(month);\n                    if (!monthDates)\n                        monthDates = [date];\n                    else\n                        monthDates.push(date);\n                    (_b = activeDateValueMap.get(year)) === null || _b === void 0 ? void 0 : _b.set(month, monthDates);\n                }\n                else {\n                    activeDateValueMap.set(year, new Map([[month, [date]]]));\n                }\n            });\n            // 如果是选择日期范围，则设置开始和结束时间\n            if (mode === 'range') {\n                rangeDate.start = undefined;\n                rangeDate.end = undefined;\n                if (modelValue === null || modelValue === void 0 ? void 0 : modelValue[0]) {\n                    // 开始时间\n                    rangeDate.start = dayjs(modelValue[0], DEFAULT_DATE_FORMAT);\n                }\n                if (modelValue === null || modelValue === void 0 ? void 0 : modelValue[1]) {\n                    // 结束时间\n                    rangeDate.end = dayjs(modelValue[1], DEFAULT_DATE_FORMAT);\n                }\n            }\n            if (needRenderCalendar) {\n                needRenderCalendar = false;\n                nextTick(() => {\n                    generateCalendarData();\n                });\n            }\n        }\n    }, {\n        immediate: true,\n        deep: true,\n    });\n    // 根据传递的日期，设置当前日期的状态\n    const updateDateStatus = (dateData, status) => {\n        let month = 0;\n        let date = 0;\n        if (dateData.toString() === '[object Object]') {\n            month = dateData.month;\n            date = dateData.date;\n        }\n        else {\n            month = dateData.month() + 1;\n            date = dateData.date();\n        }\n        const monthIndex = calendarData.value.findIndex((item) => { return item.month === month; });\n        if (monthIndex === -1)\n            return;\n        const dateIndex = calendarData.value[monthIndex].data.findIndex((item) => { return item.date === date; });\n        if (dateIndex === -1)\n            return;\n        calendarData.value[monthIndex].data[dateIndex].status = status;\n    };\n    // 初始化最小、最大年月日\n    const initDateData = () => {\n        let _minDate = props.minDate, _maxDate = props.maxDate, modelValue = props.modelValue, mode = props.mode;\n        // 当前时间的 dayjs 对象\n        const currentDayjs = dayjs();\n        currentDate.year = currentDayjs.year();\n        currentDate.month = currentDayjs.month() + 1;\n        currentDate.date = currentDayjs.date();\n        // 如果没有设置最小值，那么最小值就是当前年月日\n        if (!_minDate) {\n            _minDate = currentDayjs.format(DEFAULT_DATE_FORMAT);\n        }\n        else {\n            _minDate = formatDate(_minDate);\n        }\n        const minDateDayjs = dayjs(_minDate, DEFAULT_DATE_FORMAT);\n        minDate.year = minDateDayjs.year();\n        minDate.month = minDateDayjs.month() + 1;\n        minDate.date = minDateDayjs.date();\n        // 如果没有设置最大值，那么最大值就是当前年份最后一个月的最后一天\n        if (!_maxDate) {\n            _maxDate = currentDayjs.endOf('year').format(DEFAULT_DATE_FORMAT);\n        }\n        else {\n            _maxDate = formatDate(_maxDate);\n        }\n        const maxDateDayjs = dayjs(_maxDate, DEFAULT_DATE_FORMAT);\n        maxDate.year = maxDateDayjs.year();\n        maxDate.month = maxDateDayjs.month() + 1;\n        maxDate.date = maxDateDayjs.date();\n        let noGenerateAfterInit = false;\n        // 如果没有设置默认值，那么默认值就是当前年月\n        if (!modelValue || !(modelValue === null || modelValue === void 0 ? void 0 : modelValue.length)) {\n            currentSelectedDate.year = Math.max(currentDate.year, minDate.year);\n            currentSelectedDate.month =\n                currentDate.year === minDate.year\n                    ? Math.max(currentDate.month, minDate.month)\n                    : currentDate.month;\n            // 如果当前是单选日期模式，那么默认选中当前日期\n            if (mode === 'date' &&\n                currentSelectedDate.year === currentDate.year &&\n                currentSelectedDate.month === currentDate.month) {\n                currentSelectedDate.date = currentDate.date;\n                emits(UPDATE_MODEL_EVENT, generateDateStr(currentSelectedDate));\n            }\n        }\n        else {\n            let initDefaultDate = '';\n            switch (mode) {\n                case 'date':\n                    initDefaultDate = formatDate(modelValue);\n                    // 判断设置的默认值是否在最小、最大年月日范围内，如果不在，那么默认值就是最小、最大年月日\n                    if (minDateDayjs.isAfter(initDefaultDate)) {\n                        initDefaultDate = minDateDayjs.format(DEFAULT_DATE_FORMAT);\n                        emits(UPDATE_MODEL_EVENT, initDefaultDate);\n                    }\n                    if (maxDateDayjs.isBefore(initDefaultDate)) {\n                        initDefaultDate = maxDateDayjs.format(DEFAULT_DATE_FORMAT);\n                        emits(UPDATE_MODEL_EVENT, initDefaultDate);\n                    }\n                    break;\n                case 'multi':\n                    // 筛选出在最小、最大年月日范围内的日期\n                    // eslint-disable-next-line no-case-declarations\n                    const multiDefaultModelValue = modelValue.filter((date) => {\n                        const dateDayjs = dayjs(date);\n                        return ((dateDayjs.isAfter(minDateDayjs) &&\n                            dateDayjs.isBefore(maxDateDayjs)) ||\n                            dateDayjs.isSame(minDateDayjs) ||\n                            dateDayjs.isSame(maxDateDayjs));\n                    });\n                    if (multiDefaultModelValue.length !== modelValue.length) {\n                        emits(UPDATE_MODEL_EVENT, multiDefaultModelValue);\n                    }\n                    initDefaultDate = multiDefaultModelValue[0];\n                    break;\n                case 'range':\n                    if (modelValue.length !== 2) {\n                        debugWarn('TnCalendar', '在 range 模式下 modelValue 长度必须为 2');\n                        return;\n                    }\n                    // eslint-disable-next-line no-case-declarations\n                    const rangeMinDateDayjs = dayjs(modelValue[0]);\n                    // eslint-disable-next-line no-case-declarations\n                    const rangeMaxDateDayjs = dayjs(modelValue[1]);\n                    // 判断是否超过最大范围\n                    if (rangeMinDateDayjs.isAfter(maxDateDayjs) ||\n                        rangeMaxDateDayjs.isBefore(minDateDayjs)) {\n                        debugWarn('TnCalendar', '在 range 模式下 modelValue 超过最大范围');\n                        return;\n                    }\n                    // eslint-disable-next-line no-case-declarations\n                    const rangeDefaultModelValue = modelValue;\n                    if (rangeMinDateDayjs.isBefore(minDateDayjs)) {\n                        rangeDefaultModelValue[0] = minDateDayjs.format(DEFAULT_DATE_FORMAT);\n                        initDefaultDate = rangeDefaultModelValue[0];\n                    }\n                    if (rangeMaxDateDayjs.isAfter(maxDateDayjs)) {\n                        rangeDefaultModelValue[1] = maxDateDayjs.format(DEFAULT_DATE_FORMAT);\n                    }\n                    emits(UPDATE_MODEL_EVENT, rangeDefaultModelValue);\n                    noGenerateAfterInit = true;\n                    break;\n            }\n            if (initDefaultDate) {\n                const initDefaultDateDayjs = dayjs(initDefaultDate, DEFAULT_DATE_FORMAT);\n                currentSelectedDate.year = initDefaultDateDayjs.year();\n                currentSelectedDate.month = initDefaultDateDayjs.month() + 1;\n                currentSelectedDate.date = initDefaultDateDayjs.date();\n            }\n        }\n        if (!noGenerateAfterInit || calendarData.value.length === 0) {\n            nextTick(() => {\n                // 生成日历数据\n                generateCalendarData();\n            });\n        }\n    };\n    initDateData();\n    // 如果修改了最小、最大年月日，那么重新初始化最小、最大年月日\n    watch(() => { return [props.minDate, props.maxDate]; }, () => {\n        initDateData();\n    });\n    // dateItem点击事件\n    const dateItemClickEvent = (date) => {\n        if ((date.status === 'active' && props.mode === 'date') ||\n            date.status === 'disabled' ||\n            date.date === 0)\n            return;\n        currentSelectedDate.date = date.date;\n        updateModelValue();\n    };\n    // 滑动切换月份事件\n    const swiperSwitchMonthEvent = (event) => {\n        const current = event.detail.current;\n        currentSelectedDate.month = calendarData.value[current].month;\n        clearSwiperAnimationFlagTimer = setTimeout(() => {\n            swiperSwitchAnimationFinish = true;\n            if (clearSwiperAnimationFlagTimer) {\n                clearTimeout(clearSwiperAnimationFlagTimer);\n                clearSwiperAnimationFlagTimer = null;\n            }\n        }, 300);\n        emits('change-month', currentSelectedDate.month);\n    };\n    // 月份切换动画结束\n    let swiperSwitchAnimationFinish = true;\n    let clearSwiperAnimationFlagTimer = null;\n    const swiperSwitchMonthAnimationFinishEvent = () => {\n        swiperSwitchAnimationFinish = true;\n        if (clearSwiperAnimationFlagTimer) {\n            clearTimeout(clearSwiperAnimationFlagTimer);\n            clearSwiperAnimationFlagTimer = null;\n        }\n    };\n    // 切换月份\n    const switchMonth = (type) => {\n        if (!props.allowChangeMonth || !swiperSwitchAnimationFinish)\n            return;\n        swiperSwitchAnimationFinish = false;\n        if (type === 'prev') {\n            if ((currentSelectedDate.year === minDate.year &&\n                currentSelectedDate.month === minDate.month) ||\n                currentSelectedDate.month === 1)\n                return;\n            currentSelectedDate.month--;\n        }\n        else {\n            if ((currentSelectedDate.year === maxDate.year &&\n                currentSelectedDate.month === maxDate.month) ||\n                currentSelectedDate.month === 12)\n                return;\n            currentSelectedDate.month++;\n        }\n    };\n    // 切换年份\n    const switchYear = (type) => {\n        if (!props.allowChangeYear)\n            return;\n        if (type === 'prev') {\n            if (currentSelectedDate.year === minDate.year)\n                return;\n            currentSelectedDate.year--;\n            currentSelectedDate.month = 12;\n            currentSelectedDate.date = 31;\n        }\n        else {\n            if (currentSelectedDate.year === maxDate.year)\n                return;\n            currentSelectedDate.year++;\n            currentSelectedDate.month = 1;\n            currentSelectedDate.date = 1;\n        }\n        emits('change-year', currentSelectedDate.year);\n        reloadMonthSwiper.value = true;\n        setTimeout(() => {\n            reloadMonthSwiper.value = false;\n        }, 0);\n        // 重新生产日历数据\n        generateCalendarData();\n    };\n    return {\n        reloadMonthSwiper,\n        calendarId,\n        weekText,\n        calendarData,\n        currentMonthIndex,\n        dateContainerHeight,\n        minDate,\n        maxDate,\n        currentSelectedDate,\n        swiperSwitchMonthEvent,\n        swiperSwitchMonthAnimationFinishEvent,\n        dateItemClickEvent,\n        switchMonth,\n        switchYear,\n    };\n};\n//# sourceMappingURL=D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/components/calendar/src/composables/use-calendar.js.map","references":["D:/Development/HBuilderX/plugins/uniapp-cli-vite/node_modules/@vue/runtime-core/dist/runtime-core.d.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/libs/dayjs/index.d.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/constants/index.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/utils/index.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/components/calendar/libs/lunar-calendar/index.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/components/calendar/src/composables/use-calendar-selector.ts","D:/Development/HBuilderX/plugins/uniapp-cli-vite/node_modules/@vue/runtime-core/dist/runtime-core.d.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/libs/dayjs/index.d.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/components/calendar/src/calendar.ts","D:/Development/project/wallpaper-share-wx/uni_modules/tuniaoui-vue3/components/calendar/src/types.ts"],"uniExtApis":[],"map":"{\"version\":3,\"file\":\"use-calendar.js\",\"sourceRoot\":\"\",\"sources\":[\"use-calendar.ts\"],\"names\":[],\"mappings\":\"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\"}"}
