<template>
	<Layouts>
		<view class="main">
			<view v-if="state.globalLoading" class="loading">
				<TnLoading show animation mode="circle" color="#fff" size="50px" style="margin: auto;z-index: 10000" />
				<TnOverlay show />
			</view>
			<view class="filter-box">
				<view class="filter-btn" @click="handleOpenFilterModal('resolution')">
					<text>{{ state.currentResolution || '像素'}}</text>
				</view>
				<view class="filter-btn" @click="handleOpenFilterModal('ratio')">
					<text>{{ state.currentRatios.length ? state.currentRatios.join(',') : '比例'}}</text>
				</view>
				<view class="filter-btn" @click="handleOpenFilterModal('model')">
					<text>{{ state.currentSort ? FilterModes[state.currentSort] : '排序'}}</text>
				</view>
				<view v-if="state.currentSort === 'toplist'" class="filter-btn"
					@click="handleOpenFilterModal('dateRange')">
					<text>{{ state.currentDateRange ? SortDateRanges[state.currentDateRange] : "范围" }}</text>
				</view>
			</view>

			<!-- 瀑布流 -->
			<scroll-view class="water-fall-container" :refresher-enabled="refresherEnabled" scroll-y refresher-enabled
				refresher-default-style="white" :refresher-triggered="triggered" @refresherrefresh="refresherrefresh"
				@refresherrestore="refresherrestore" @refresherabort="refresherabort" @scrolltolower="scrolltolower">
				<TnWaterFall :data="imgs" style="width: 100%" mode="calc">
					<template #left="{ item }">
						<view class="image-data" @click.stop="handleClickImage(item.src)">
							<LazyLoad class="image" :src="item.src" />
							<view class="tag">1920 × 1080</view>
						</view>
					</template>
					<template #right="{ item }">
						<view class="image-data" @click.stop="handleClickImage(item.src)">
							<LazyLoad class="image" :src="item.src" />
							<view class="tag">1920 × 1080</view>
						</view>
					</template>
				</TnWaterFall>
				<TnLoadmore v-show="showLoadmore" :status="loadmoreStatus" size="14px" color="#fff" class="more" />
			</scroll-view>
		</view>
		<Filter v-model="filterModalShow" :type="currentFilterType" />
	</Layouts>
</template>

<script setup lang="uts">
	import { ref } from 'vue'
	import Layouts from '@/layouts/index.uvue';
	import Filter from '@/components/Filter.uvue'
	import { FilterType, FilterMode, FilterModes, SortDateRanges } from '@/types/index.uts'
	import { state } from '@/store/index.uts'
	import { imgs } from "./config.uts"
	import LazyLoad from './components/LazyLoad.uvue'
	import type { LoadmoreStatus } from '@/uni_modules/tuniaoui-vue3'
	import TnLoading from '@/uni_modules/tuniaoui-vue3/components/loading/src/loading.vue'
	import TnLoadmore from '@/uni_modules/tuniaoui-vue3/components/loadmore/src/loadmore.vue'
	import TnOverlay from '@/uni_modules/tuniaoui-vue3/components/overlay/src/overlay.vue'
	import TnWaterFall from '@/uni_modules/tuniaoui-vue3/components/water-fall/src/water-fall.vue'

	const filterModalShow = ref(false)
	const currentFilterType = ref<FilterType>('resolution')
	// 当前下拉刷新状态
	const triggered = ref(false)
	const refresherEnabled = ref(false)
	//上拉加载
	const loadmoreStatus = ref<LoadmoreStatus>('loadmore')
	const showLoadmore = ref(false)

	function handleOpenFilterModal(filterType : FilterType) {
		currentFilterType.value = filterType
		filterModalShow.value = true
	}

	function handleClickImage(src) {
		uni.navigateTo({
			url: '/subPages/pages/detail/index',
		})
	}

	function refresherpulling() {
		// console.log('refresherpulling')
	}

	function refresherrefresh() {
		console.log('refresherrefresh')
		triggered.value = 'restore'
		setTimeout(() => {
			triggered.value = false
		}, 3000)
	}

	function refresherrestore() {
		console.log('refresherrestore')
		triggered.value = 'restore';
	}

	function refresherabort() {
		console.log('refresherabort')
		triggered.value = false
	}

	function scrolltolower() {
		console.log('scrolltolower')
		loadmoreStatus.value = 'loading'
		setTimeout(() => {
			loadmoreStatus.value = 'loadmore'
		}, 3000)
	}

	onMounted(() => {
		setTimeout(() => {
			showLoadmore.value = true
		}, 5000)
	})
</script>

<style scoped lang="scss">
	.main {
		display: flex;
		align-items: center;
		position: relative;
		height: 100%;
		padding: 0 0 40rpx 0;

		.loading {
			position: absolute;
			width: 100%;
			height: 100%;
			z-index: 20;
		}

		.filter-box {
			display: flex;
			flex-direction: row;
			justify-content: space-around;
			height: 100rpx;
			width: 100%;
			background-color: rgba(0, 0, 0, 0.3);
			backdrop-filter: blur(40px);

			.filter-btn {
				flex: 1;
				display: flex;
				justify-content: center;
				align-items: center;
				padding: 0 12px;
				height: 100%;
				color: #fff;

				text {
					width: 100%;
					overflow: hidden;
					white-space: nowrap;
					text-overflow: ellipsis;
					text-align: center;
				}

				&:hover {
					background: rgba(128, 128, 128, 0.2);
				}
			}
		}

		.water-fall-container {
			width: 100%;
			flex: 1;

			:deep(.tn-water-fall) {
				flex-direction: row;
			}

			.image-data {
				position: relative;
				width: calc(100% - 20rpx);
				margin: 10rpx;
				box-shadow: 0 0 5px 1px rgba(0, 0, 0, 0.3);

				.tag {
					position: absolute;
					bottom: 0;
					width: 100%;
					text-align: center;
					color: #fff;
					background-color: rgba(0, 0, 0, .165);
					background-image: linear-gradient(to bottom, rgba(0, 0, 0, .03) 0, rgba(0, 0, 0, .3) 100%);
				}

				.image {
					width: 100%;
					height: auto;
				}
			}
		}

		.more {
			padding: 10px 0;

			&:deep(.tn-loadmore__content) {
				flex-direction: row;
			}
		}
	}
</style>