{"version":3,"file":"use-image-upload.js","sources":["uni_modules/tuniaoui-vue3/components/image-upload/src/composables/use-image-upload.ts"],"sourcesContent":["import { computed, getCurrentInstance, nextTick, ref, watch } from 'vue'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../../constants'\nimport { debugWarn, isBoolean, isPromise, throwError } from '../../../../utils'\nimport { useFormItem } from '../../../form'\nimport useUploadHandleFunction from './use-upload-handle-function'\n\nimport type { ImageUploadList, ImageUploadListItem } from '../types'\nimport type { ImageUploadProps } from '../image-upload'\n\nexport const useImageUpload = (props: ImageUploadProps) => {\n  const { emit } = getCurrentInstance()!\n  const {\n    chooseImage,\n    uploadProcess,\n    checkFileSizeAndExtension,\n    showErrorTips,\n  } = useUploadHandleFunction(props)\n\n  const { formItem } = useFormItem()\n\n  // 文件列表\n  const fileList = ref<ImageUploadList>([])\n\n  // 监听文件列表变化\n  let isInnerUpdate = false\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (isInnerUpdate) {\n        isInnerUpdate = false\n        return\n      }\n\n      fileList.value = val.map((item) => ({\n        url: item,\n        status: 'done',\n        progress: 100,\n      }))\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  // 判断是否超过最大上传数\n  const isExceedMaxCount = computed<boolean>(\n    () => fileList.value.length >= props.limit\n  )\n  // 当前剩余可选文件数量\n  const currentRemainFileCount = computed<number>(() => {\n    if (props.multiple) {\n      return props.limit - fileList.value.length\n    } else {\n      return props.limit - fileList.value.length > 0 ? 1 : 0\n    }\n  })\n\n  // 选择文件\n  const chooseFile = async () => {\n    const { disabled, action, customUploadHandler } = props\n    if (disabled) return\n\n    // 如果没有设置action或者没有自定义图片上传处理函数，则直接返回\n    if (!action && !customUploadHandler) {\n      showErrorTips('请设置action或者自定义图片上传处理函数')\n      debugWarn('TnImageUpload', '请设置action或者自定义图片上传处理函数')\n      return\n    }\n    // 选择前已有文件的数量\n    const prevUploadedFileCount = fileList.value.length\n    chooseImage(currentRemainFileCount.value)\n      .then((res) => {\n        let selectFile = res\n        // 判断尺寸和格式是否正确\n        const checkFailFiles = checkFileSizeAndExtension(selectFile)\n        if (checkFailFiles.length) {\n          showErrorTips('文件格式或大小不符合要求')\n          emit('oversizeOrNoSupport', checkFailFiles)\n          // 剔除不符合要求的文件\n          selectFile = selectFile.filter(\n            (item) => !checkFailFiles.includes(item)\n          )\n        }\n        fileList.value.push(\n          ...selectFile.map<ImageUploadListItem>((item) => {\n            const url = (item as UniApp.ChooseImageSuccessCallbackResultFile)\n              .path\n            return {\n              url,\n              status: 'ready',\n              progress: 0,\n              file: item,\n            }\n          })\n        )\n        if (props.autoUpload && selectFile.length)\n          uploadFile(prevUploadedFileCount)\n      })\n      .catch((err) => {\n        debugWarn('TnImageUpload', `选择图片失败: ${err}`)\n        showErrorTips(err?.errMsg || '选择图片失败')\n      })\n  }\n\n  // 处理上传事件\n  const handleUploadEvent = (\n    item: ImageUploadListItem,\n    index: number,\n    uploadSingle = false\n  ) => {\n    uploadProcess(item)\n      .then((res) => {\n        if (res) {\n          handleUploadSuccess(item)\n        } else {\n          handleUploadError(item, '上传失败')\n        }\n      })\n      .catch((err) => {\n        handleUploadError(item, err)\n      })\n      .finally(() => {\n        if (!uploadSingle) uploadFile(index + 1)\n      })\n  }\n\n  // 上传文件\n  const uploadFile = (startIndex: number, uploadSingle = false) => {\n    const { autoUpload, beforeUpload } = props\n    const autoNextUpload = autoUpload && !uploadSingle\n    // 判断是否全部文件上传完毕\n    if (startIndex >= fileList.value.length) {\n      if (props.autoRemoveFaildFile) handleUploadCompleteFailFile()\n      return\n    }\n\n    const fileItem = fileList.value[startIndex]\n\n    // 如果当前上传完毕自动上传下一张\n    if (fileItem.progress === 100) {\n      fileItem.status = 'done'\n      fileItem.uploadTask = undefined\n      if (autoNextUpload) uploadFile(startIndex + 1)\n      return\n    }\n\n    // 上传前回调\n    if (!beforeUpload) {\n      handleUploadEvent(fileItem, startIndex, uploadSingle)\n      return\n    }\n\n    const shouldUpload = beforeUpload(fileItem.file!)\n    const isBeforeUploadPromiseOrBoolean = [\n      isPromise(shouldUpload),\n      isBoolean(shouldUpload),\n    ].includes(true)\n    if (!isBeforeUploadPromiseOrBoolean) {\n      throwError(\n        '[TnImageUpload]',\n        'beforeUpload返回值必须是Promise或者Boolean'\n      )\n    }\n\n    if (isPromise(shouldUpload)) {\n      shouldUpload\n        .then((res) => {\n          if (res) handleUploadEvent(fileItem, startIndex, uploadSingle)\n          else {\n            removeFile(startIndex)\n            if (autoNextUpload) uploadFile(startIndex)\n          }\n        })\n        .catch((err) => {\n          debugWarn('TnImageUpload', `beforeUpload出错: ${err}`)\n          fileItem.status = 'failed'\n        })\n    } else {\n      if (shouldUpload) handleUploadEvent(fileItem, startIndex, uploadSingle)\n      else {\n        removeFile(startIndex)\n        if (autoNextUpload) uploadFile(startIndex)\n      }\n    }\n  }\n\n  // 获取上传成功的文件url\n  const getUploadSuceesFileUrlValue = () => {\n    return fileList.value\n      .filter((item) => item.status === 'done')\n      .map((item) => item.url)\n  }\n\n  // 已上传文件列表发生改变\n  const uploadSuccessFileListChange = () => {\n    isInnerUpdate = true\n    const value = getUploadSuceesFileUrlValue()\n    emit(UPDATE_MODEL_EVENT, value)\n    nextTick(() => {\n      emit(CHANGE_EVENT, value)\n      if (props.validateEvent) {\n        formItem?.validate?.('change').catch((err) => {\n          debugWarn(err)\n        })\n      }\n    })\n  }\n\n  // 处理文件上传成功\n  const handleUploadSuccess = (item: ImageUploadListItem) => {\n    item.status = 'done'\n    item.progress = 100\n    item.uploadTask = undefined\n    item.file = undefined\n    emit('success', item)\n    uploadSuccessFileListChange()\n  }\n\n  // 处理上传文件发生错误\n  const handleUploadError = (item: ImageUploadListItem, errorMsg: string) => {\n    item.status = 'failed'\n    item.progress = 0\n    item.uploadTask = undefined\n    item.file = undefined\n    showErrorTips(errorMsg)\n    emit('fail', new Error(errorMsg), item)\n  }\n\n  // 处理上传完成后失败的文件\n  const handleUploadCompleteFailFile = () => {\n    const tempFileList = [...fileList.value]\n    tempFileList.forEach((item, index) => {\n      if (item.status === 'failed') {\n        removeFile(index)\n      }\n    })\n  }\n\n  // 重新上传文件\n  const retryUploadFile = (index: number) => {\n    const fileItem = fileList.value[index]\n    fileItem.status = 'ready'\n    fileItem.progress = 0\n    uploadFile(index, true)\n  }\n\n  // 重新上传全部文件\n  const retryAllUpload = () => {\n    // 查找出第一张上传失败的图片\n    const firstFailedFileIndex = fileList.value.findIndex(\n      (item) => item.status === 'failed'\n    )\n    uploadFile(firstFailedFileIndex)\n  }\n\n  // 手动上传文件\n  const customUploadHandle = () => {\n    if (!fileList.value.length) return\n    uploadFile(0)\n  }\n\n  // 移除文件\n  const removeFile = (index: number) => {\n    const fileItem = fileList.value[index]\n\n    // 如果文件正在上传中，取消上传\n    if (\n      fileItem.status === 'uploading' &&\n      fileItem.uploadTask &&\n      fileItem.progress > 0 &&\n      fileItem.progress < 100\n    ) {\n      fileItem.uploadTask.abort()\n    }\n\n    fileList.value.splice(index, 1)\n\n    // 如果文件是已经完成的，重新计算上传成功的文件url\n    if (fileItem.status === 'done') {\n      emit('remove', fileItem.url)\n      uploadSuccessFileListChange()\n    }\n  }\n\n  // 删除文件\n  const removeFileEvent = (index: number) => {\n    const { disabled, beforeRemove } = props\n    if (disabled) return\n    // 获取待删除的文件\n    const fileItem = fileList.value[index]\n    if (!fileItem) return\n\n    uni.showModal({\n      title: '操作提示',\n      content: '确认需要移除该图片吗?',\n      showCancel: true,\n      cancelText: '取 消',\n      confirmText: '确 认',\n      success: (res) => {\n        if (res.confirm) {\n          // 删除前回调\n          if (!beforeRemove) {\n            removeFile(index)\n            return\n          }\n\n          const shouldRemove = beforeRemove(fileItem)\n          const isShouldRemovePromiseOrBoolean = [\n            isPromise(shouldRemove),\n            isBoolean(shouldRemove),\n          ].includes(true)\n          if (!isShouldRemovePromiseOrBoolean) {\n            throwError(\n              '[TnImageUpload]',\n              'beforeRemove返回值必须是Promise或者Boolean'\n            )\n          }\n\n          if (isPromise(shouldRemove)) {\n            shouldRemove\n              .then((res) => {\n                if (res) removeFile(index)\n              })\n              .catch((err) => {\n                debugWarn('TnImageUpload', `beforeRemove出错: ${err}`)\n              })\n          } else {\n            if (shouldRemove) removeFile(index)\n          }\n        }\n      },\n    })\n  }\n\n  // 清空文件列表\n  const clearAllFile = () => {\n    // 如果文件正在上传中，取消上传\n    fileList.value.forEach((item) => {\n      if (\n        item.status === 'uploading' &&\n        item.uploadTask &&\n        item.progress > 0 &&\n        item.progress < 100\n      ) {\n        item.uploadTask.abort()\n      }\n    })\n    fileList.value = []\n    uploadSuccessFileListChange()\n  }\n\n  // 点击图片预览图片\n  const previewImage = (index: number) => {\n    const previewImageList = fileList.value\n      .filter((item) => item.status === 'done')\n      .map((item) => item.url)\n\n    uni.previewImage({\n      current: index,\n      urls: previewImageList,\n    })\n\n    emit('preview', previewImageList[index])\n  }\n\n  return {\n    fileList,\n    isExceedMaxCount,\n    chooseFile,\n    retryUploadFile,\n    retryAllUpload,\n    customUploadHandle,\n    removeFileEvent,\n    clearAllFile,\n    previewImage,\n  }\n}\n"],"names":["getCurrentInstance","useUploadHandleFunction","useFormItem","ref","watch","computed","__awaiter","debugWarn","isPromise","isBoolean","throwError","UPDATE_MODEL_EVENT","nextTick","CHANGE_EVENT","_a","uni","res"],"mappings":"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"}